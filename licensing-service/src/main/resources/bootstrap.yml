spring:
  application:
    name: licensing-service
  profiles:
#    指定服务应该运行的默认profile。profile映射到某个环境
    active: dev
  cloud:
    config:
      enabled: true
      #     指定Spring Cloud Config服务器端的位置
      uri: http://localhost:8071



resilience4j.circuitbreaker:
  instances:
#    许可证服务实例配置（注解中提供的断路器名称）
    licenseService:
#      指示是否在健康信息端点公开配置
      registerHealthIndicator: true
#      设置闭合状态中的环形缓冲区的大小,默认值为100(请求5次,这五次当中失败率高于failureRateThreshold阈值，则第6次就进入断开状态（在断开状态下断路器拒绝请求）)
      ringBufferSizeInClosedState: 5
#      设置半断开状态中的环形缓冲区的大小,默认值为10（请求3次，这3次当中失败率高于failureRateThreshold阈值则重新进入断开状态，如果小于或等于failureRateThreshold阈值则进入闭合状态）
      ringBufferSizeInHalfOpenState: 3
#      设置断开状态的等待时间,默认值60 000ms（进入断开状态100秒后，自动进入半段开状态）
      waitDurationInOpenState: 100s
#      设置失败率阈值百分比,默认值50
      failureRateThreshold: 50
#      设置应该记录为失败的异常,默认情况下所有异常都记录为失败
      recordExceptions:
        - org.springframework.web.client.HttpServerErrorException
        - java.io.IOException
        - java.util.concurrent.TimeoutException
        - org.springframework.web.client.ResourceAccessException

    organizationService:
      registerHealthIndicator: true
      ringBufferSizeInClosedState: 6
      ringBufferSizeInHalfOpenState: 4
      waitDurationInOpenState: 20s
      failureRateThreshold: 60

####################配置舱壁模式#####################

resilience4j.bulkhead:
  instances:
    bulkheadLicenseService:
#      阻塞一个线程的最长时间（设置进入一个舱壁时阻塞一个线程的最长时间。默认值为0）
      maxWaitDuration: 10ms
#      最大并发调用数（设置这个舱壁允许的最大并发调用数。默认值为25）
      maxConcurrentCalls: 20

resilience4j.thread-pool-bulkhead:
  instances:
    bulkheadLicenseService:
#      线程池中的最大线程数（默认值是Runtime.getRuntime().availableProcessors()）
      maxThreadPoolSize: 1
#      核心线程池大小(默认值是Runtime.getRuntime().availableProcessors())
      coreThreadPoolSize: 1
#      队列容量(默认值是100)
      queueCapacity: 1
#      空闲线程在终止前等待新任务的最长时间(当线程的数量大于核心线程的数量时，就会发生这种情况。默认值是20毫秒)
      keepAliveDuration: 20ms


resilience4j.retry:
  instances:
    retryLicenseService:
#      重试的最大次数
      maxRetryAttempts: 5
#      两次重试之间的等待时间
      waitDuration: 10000
#      想要重试的异常列表
      retry-exceptions:
        - java.util.concurrent.TimeoutException
#
resilience4j.ratelimiter:
  instances:
    licenseService:
#      定义线程等待获取许可的时间,默认值为5秒
      timeoutDuration: 1000ms
#      定义限流刷新周期,默认值是500纳秒(在每个周期之后，限流器将许可计数重置回limitForPeriod值)
      limitRefreshPeriod: 5000
#      定义在限流刷新周期期间可用的许可数(一个刷新周期期间可用的许可数量，其默认值是50)
      limitForPeriod: 5